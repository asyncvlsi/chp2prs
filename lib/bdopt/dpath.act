
/*************************************************************************
 *
 *  Copyright (c) 2020 Rajit Manohar
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
 *
 **************************************************************************
 */
import globals;
import std::gates;
import "syn/qdi/var.act";
import "std/arb.act";

namespace syn {
  /*
 * Datapath elements
 *
 *   Need to define:
 *      - variables
 *      - send
 *      - receive
 *      - expression evaluation
 *
 */

  export
  defproc delaybuf(bool in, out) {
    INVX1 ix1(in);
    INVX1 inx2(ix1.Y, out);
  }

  export template<pint D>
  defproc delay(bool in, out) {
    [
      D > 0 ->
      delaybuf d[D];
      ( i : D - 1:
        d[i].out = d[i + 1].in;
      )
      d[0].in = in;
      d[D - 1].out = out;
    [] else ->
      out = in;
    ]
  }

  /**
 * a transfer triggers a pull channel (sdtexprchan) and puts the result on a push channel (sdtchan).
 * @param W: width of the push and pull channels
 */
  export template<pint W>
  defproc transfer(a1of1? c; sdtexprchan<W> e; sdtchan<W> ch) {
    c.r = e.r;
    e.a = ch.r;
    e.d = ch.d;
    c.a = ch.a;
  }

  /**
 * recvport gates/triggers a variable write on a connected write port.
 * @param W: width of the port and channel
 */
  export template<pint W, W2>
  defproc recvport(a1of1 c; sdtchan<W> ch; sdtchan<W2> port) {
    bool _r;
    prs {
      c.r & ch.r #> _r-
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 1;
      _r{- 1}
    }
    INVX1 ix(_r, port.r);
    ch.d[0..std::min(W, W2) - 1] = port.d[0..std::min(W, W2) - 1];
    [ W2 > W ->
      ( i : W..W2 - 1:
        port.d[i] = GND;
      ) ]
    ch.a = port.a;
    c.a = port.a;
  }

  /**
 * recvport_drop is like recvport but does not actually write to any variable. This save a write in the case of a `L?`
 * without an associated variable
 */
  export template<pint W>
  defproc recvport_drop(a1of1 c; sdtchan<W> ch) {
    bool _r;
    prs {
      c.r & ch.r #> _r-
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 1;
      _r{- 1}
    }
    INVX1 ix(_r, c.a);
    ch.a = c.a;
  }

  /**
 * a port mux for reading c that selects from multiple send channels based on control channels
 * @param W: wodth of the channels
 * @param N: number of input channels
 */
  export template<pint W, N>
  defproc muxinport(sdtchan?<W> c; sdtchan<W> m[N]; a1of1 ctrl[N]) {
    { N > 0 : "Parameter out of range" };

    [
      N = 1 ->
      m[0] = c;
    [] else ->
      delay<3> dly[N];
      std::gates::sigbuf<W + 1> ctl_req[N];
      ( i : N:
        ctl_req[i].in = ctrl[i].r;
      )
      AND2X1 data_and[N][W];
      ( i : N:
        ( j : W:
          data_and[i][j].A = ctl_req[i].out[j];
          data_and[i][j].B = c.d[j];
          data_and[i][j].Y = m[i].d[j];
        )
        dly[i].out = m[i].r;
      )

      bool _in[N];
      prs {
        ( i : N :  ctl_req[i].out[W] & c.r #> _in[i]- )
      }
      INVX1 ix[N];
      ( i : N:
        ix[i](_in[i], dly[i].in);
      )
      sizing{
        leak_adjust <- 1;
        p_n_mode <- 1;
        (; i : N:
          _in[i]{- 1}
        )
      }

      ( i : N:
        m[i].a = ctrl[i].a;
      )
      std::gates::ortree<N, false> o(, c.a);
      ( i : N:
        m[i].a = o.in[i];
      )
    ]
  }

  /**
 * a port mux for writing c from multiple channels
 * @param W: wodth of the channels
 * @param N: number of output channels
 */
  export template<pint W, N>
  defproc muxoutport(sdtchan!<W> c; sdtchan<W> m[N]) {
    { N > 0 : "Parameter out of range" };

    [
      N = 1 ->
      m[0] = c;
    [] else ->
      std::gates::sigbuf<N> s(c.a);
      AND2X1 _mux[W][N];
      std::gates::ortree<N, false> ortr[W];
      std::gates::ortree<N, false> orreq;
      ( i : W:
        ( j : N:
          _mux[i][j].A = m[j].d[i];
          _mux[i][j].B = m[j].r;
          _mux[i][j].Y = ortr[i].in[j];
        )
        ortr[i].out = c.d[i];
      )
      ( j : N:
        orreq.in[j] = m[j].r;
      )
      delay<20> dly_req(orreq.out, c.r);

      bool _ma[N];
      prs {
        /* ack the appropriate input */
        ( i : N :  s.out[i] & m[i].r #> _ma[i]- )
      }
      sizing{
        leak_adjust <- 1;
        p_n_mode <- 1;
        (; i : N:
          _ma[i]{- 1}
        )
      }
      INVX1 ix[N];
      ( i : N:
        ix[i](_ma[i], m[i].a);
      )
    ]
  }

  export template<pint N>
  defproc mux_bool_inport(sdtboolchan? c; sdtchan<1> m[N]; a1of1 ctrl[N]) {
    muxinport<1, N> i(c.x, m, ctrl);
  }

  export template<pint N>
  defproc mux_bool_outport(sdtboolchan! c; sdtchan<1> m[N]) {
    muxoutport<1, N> i(c.x, m);
  }

  /*-- variable access ports --*/
  /**
 * the write port is a provides the pull down element to set a variable.
 * it does so when the channel issues a request
 * @param W: width of the channel and variable
 *
 * NOTE: @TODO if timing analysis is to hard go back to validation tree
 */
  export template<pint W>
  defproc writeport(bool! wt[W], wf[W]; sdtvar<W> var; sdtchan<W> in) {
    bool _d_B[W];
    std::gates::sigbuf<W + 1> s(in.r);

    /*-- inverted data value --*/
    INVX1 id[W];
    ( i : W:
      id[i](.A = in.d[i], .Y = _d_B[i]);
    )

    INVX1 gwt[W], gwf[W];

    ( i : W:
      gwt[i](.Y = wt[i]);
      gwf[i](.Y = wf[i]);
    )

    bool _dly_req_in;

    prs {
      ( i : W :
        s.out[i] & in.d[i] & _dly_req_in -> gwt[i].A-
        ~s.out[i] -> gwt[i].A+

        s.out[i] & _d_B[i] & _dly_req_in -> gwf[i].A-
        ~s.out[i] -> gwf[i].A+ )
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 1;
      (; i : W:
        gwt[i].A{- 1};
        gwf[i].A{- 1}
      )
    }

    delay<10> dly(s.out[W]);

    INVX1 ix(dly.out, _dly_req_in);
    NOR2X1 iy(Reset, _dly_req_in, in.a);
  }

  /**
 * the read port gives out the value of the variable on request.
 * @param W: width of the channel and variable
 */
  export template<pint W>
  defproc readport(sdtvar<W> var; sdtexprchan<W> out) {
    bool xout;

    std::gates::sigbuf<W> s(xout);
    delay<4> dly(out.r, out.a);

    INVX1 ix(out.r, xout);
    prs {
      ( i : W :
        ~s.out[i] & ~var.d[i].f -> out.d[i]+
        s.out[i] -> out.d[i]- )
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 1;
      (; i : W:
        out.d[i]{- 1}
      )
    }
  }

  /**
 * initialises a variable and creates the appropriate read and write ports.
 * @param W: width of the variable
 * @param NO: number of output ports
 * @param NI: number of input ports
 */
  export template<pint W; pint NI, NO>
  defproc var_int_ports(
    sdtvar<W> v;
    sdtchan<W> in[NI];
    sdtexprchan<W> out[NO]
  ) {
    var_init<W, false> x(v);
    [ NO > 0 ->
      readport<W> r[NO];
      ( i : NO:
        r[i].var = x.v;
        r[i].out = out[i];
      ) ]
    writeport<W> w(x.wt, x.wf, v);
    [
      NI = 1 ->
      w.in = in[0];
    [] NI > 1 ->
      muxoutport<W, NI> mx(w.in, in);
    ]
  }

  /*
 * this is a workarround for simulation cases where you have 0 read ports, in a physical implementation that would not make sense,
 * zero length arrays are not allowed.
 */
  export template<pint W; pint NI>
  defproc var_int_in_ports(sdtvar<W> v; sdtchan<W> in[NI]) {
    var_int_ports<W, NI, 1> ports(v, in);
    ports.out[0].r = GND;
  }
  export template<pint W; pint NO>
  defproc var_int_out_ports(sdtvar<W> v; sdtexprchan<W> out[NO]) {
    var_int_ports<W, 1, NO> ports(v, , out);
    ports.in[0].r = GND;
  }

  /*
 * this is a workarround for simulation cases where you have 0 read ports, in a physical implementation that would not make sense,
 * zero length arrays are not allowed.
 */
  export template<pint NI>
  defproc var_bool_in_ports(sdtboolvar v; sdtchan<1> in[NI]) {
    var_int_ports<1, NI, 1> x;
    ( i : NI:
      x.in[i] = in[i];
    )
    x.out[0].r = GND;
    x.v = v.x;
  }

  export template<pint NO>
  defproc var_bool_out_ports(sdtboolvar v; sdtexprchan<1> out[NO]) {
    var_int_ports<1, 1, NO> x;
    ( i : NO:
      x.out[i] = out[i];
    )
    x.in[0].r = GND;
    x.v = v.x;
  }

  export
  defproc trueto1of2(r1of2 out) {
    out.a = out.t;
    out.f = GND;
    out.d[0] = out.t;
    out.r = out.a;
  }

  export
  defproc bdto1of2(r1of2 out) {
    bool _d, _t, _f;

    INVX1 ix1(out.d[0], _d);
    INVX1 ix2(_t, out.t);
    INVX1 ix3(_f, out.f);

    prs {
      out.r & out.a & out.d[0] -> _t-
      ~out.a -> _t+
      out.r & out.a & _d -> _f-
      ~out.a -> _f+
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 1;
      _t{- 1};
      _f{- 1}
    }
  }

  export template<pint W>
  defproc sdtchan_to_probe(sdtchan<W> ch; sdtchan<1> probe) {
    ch.r = probe.r;
    ch.d[0] = probe.d[0];
    ch.a = probe.a;
  }

  export template<pint N; pint idx[N]; pint T>
  defproc probed_clause(r1of2 g[N]; sdtchan<1> probe[T]; bool! out) {
    pint tstval, tmp;
    pint lo_idx[N];
    tstval = 0;
    tmp = 0;
    *[ tmp < N ->
      lo_idx[tmp] = tstval;
      tstval = tstval + idx[tmp];
      tmp = tmp + 1; ]
    { T = tstval : "Inconsistent template parameters" };
    bool _out;
    prs {
      (| i: N: g[i].t & (& j: idx[i]: probe[j + lo_idx[i]].r)) -> _out-
      (& i: N: ~g[i].t) -> _out+
      _out => out-
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 1;
      _out{- 1};
      out{- 1}
    }
  }

  export
  defproc arbiter_builtin <: std::arbiter ()
  +{
    std::channel::bd<N> A, Ap;
    std::channel::bd<M> B, Bp;
  }{
    std::raw_arbiter rx(A.r, B.r);
    bool _u, _v;

    bool _dA[N], _dB[M];
    bool _ap, _bp;

    prs {
      rx.u => _u-
      rx.v => _v-

      ~_u & ~Bp.a => Ap.r+
      ~_v & ~Ap.a => Bp.r+

      ( i : N :
        A.d[i] => _dA[i]-
        _dA[i] => Ap.d[i]- )

      ( i : M :
        B.d[i] => _dB[i]-
        _dB[i] => Bp.d[i]- )

      Ap.a => _ap-
      Bp.a => _bp-
      _ap => A.a-
      _bp => B.a-
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 1;
      _u{- 1};
      _v{- 1};
      Ap.r{- 1};
      Bp.r{- 1};
      _ap{- 1};
      _bp{- 1};
      A.a{- 1};
      B.a{- 1}
    }
    sizing{
      leak_adjust <- 1;
      p_n_mode <- 0;
      (; i : N:
        _dA[i]{- 1};
        Ap.d[i]{- 1}
      );
      (; i : M:
        _dB[i]{- 1};
        Bp.d[i]{- 1}
      )
    }
  }
}
