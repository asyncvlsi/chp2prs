/* auto-generated by logic synthesis */
import "0.act";

import syn::ring;
open syn::ring;
open syn;
import "runs/0_expr.act";
open syn::expr;


defproc ring_snk <: snk()
+{
  bd_int<8> x;
  bd<8> l;
  }
{
  refine {
    /* synthesis output */
    
/* start rsyn */
// One Ring ---------------------

// Initial token buffer to initialize ring
elem_c_itb block_1;

// Pipe block for action: l?x
elem_c_ppa_brs_bd block_2;
connect_inchan_to_ctrl<8> conn_z_2;
conn_z_2.ctrl = block_2.zero;
conn_z_2.ch = l;

// Data for action: l?x
capture<5,6,8> latch_x_0;
latch_x_0.go = block_2.data;
latch_x_0.din = l.d;

// Connecting block_1 & block_2
block_2.m1 = block_1.p1;

// Connecting block_2 & block_1
block_1.m1 = block_2.p1;


/* end rsyn */
    
    /* end refine */
  }
  /* end process */
}
defproc ring_src <: src()
+{
  bd<8> r;
  }
{
  refine {
    /* synthesis output */
    
/* start rsyn */

// Pipe block for action: r!0x5
elem_c_paa_brs_bd block_1;
connect_outchan_to_ctrl<8> conn_z_1;
conn_z_1.ch = r;

// Data for action: r!0x5
// output bitwidth: 8 bits


blk_1 inst_1;
delay_line_chan<1> delay_expr_1;
inst_1.out = r.d;
delay_expr_1.m1 = block_1.zero;
delay_expr_1.p1 = conn_z_1.ctrl;
source_brs term_inst_1;
term_inst_1.c = block_1.m1;
sink_brs term_inst_2;
term_inst_2.c = block_1.p1;


/* end rsyn */
    
    /* end refine */
  }
  /* end process */
}
defproc ring_buf <: buf()
+{
  bd_int<8> x;
  bd<8> r;
  bd<8> l;
  }
{
  refine {
    /* synthesis output */
    
/* start rsyn */

// Pipe block for action: l?x
elem_c_ppa_brs_bd block_1;
connect_inchan_to_ctrl<8> conn_z_1;
conn_z_1.ctrl = block_1.zero;
conn_z_1.ch = l;

// Data for action: l?x
capture<5,6,8> latch_x_0;
latch_x_0.go = block_1.data;
latch_x_0.din = l.d;
source_brs term_inst_1;
term_inst_1.c = block_1.m1;
connect_outchan_to_ctrl<8> conn_z_2;
conn_z_2.ch = r;

// Data for action: r!x
conn_z_2.ctrl = block_1.p1;

latch_x_0.dout = r.d;


/* end rsyn */
    
    /* end refine */
  }
  /* end process */
}
defproc ring_testproc <: testproc()
+{
  ring_snk o;
  ring_src i;
  ring_buf b;
  bd<8> X;
  bd<8> Y;
  }
{
  /* end process */
}
