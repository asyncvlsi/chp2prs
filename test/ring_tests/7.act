
defproc gcd_decomp (chan?(int<8>) l1; chan?(int<8>) l2; chan!(int<8>) r1)
{
	int<2> c;
	int<8> x,y;
	int<8> x1,y1;
	chp {
		c:=0; x:=0; y:=0; 
		*[
			[ c=0 -> l1?x; l2?y; c:=1
			// []c=1 & x>y -> x1:=x-y ; x:=x1
			[]c=1 & x>y -> x:=x-y 
			// []c=1 & y>x -> y1:=y-x ; y:=y1
			[]c=1 & y>x -> y:=y-x
			[]c=1 & x=y -> r1!x; c:=0
			]
		]
	}
}

defproc source_100 (chan!(int<8>) c)
{
	chp{
		*[c!100]
	}
}

defproc source_15 (chan!(int<8>) c)
{
	chp{
		*[c!15]
	}
}

defproc snk (chan?(int<8>) l)
{
	int<8> x;
	chp{
		*[l?x; log("%d", x)]
	}
}

defproc testproc (chan?(int<8>) X1, X2; chan!(int<8>) Y)
{
  gcd_decomp g(X1, X2, Y);

  source_100 ix1(X1);
  
  source_15 ix2(X2);

  snk o(Y);
}
