
defproc gcd_decomp (chan?(int<8>) l1; chan?(int<8>) l2; chan!(int<8>) r1)
{
	int<2> c,c1;
	int<8> x,y;
	int<8> x1,y1;

    chan(int<2>) CS, CR;
    chan(int<8>) XS, XR;
    chan(int<8>) YS, YR;

	chp {
        // top_decomp: (
        //     qdi_itb:(c1:=0;*[CS!c1;CR?c1]) 
        //     ,
        //     qdi_itb:(x1:=0;*[XS!x1;XR?x1]) 
        //     ,
        //     qdi_itb:(y1:=0;*[YS!y1;YR?y1]) 
        //     ,
        //     (
		// 	*[ CS?c,YS?y,XS?x;
		// 		[ c=0 -> l1?x; l2?y; c:=1 []else ->skip];
		// 		[c=1 & x>y -> x:=x-y []else ->skip];
		// 		[c=1 & y>x -> y:=y-x []else ->skip];
		// 		[c=1 & x=y -> r1!x; c:=0 []else ->skip];
        //         CR!c,YR!y,XR!x
		// 	]
		// 	)
		// )
			c:=0; x:=0; y:=0;
			*[ 
				[ c=0 -> l1?x1; x:=x1; l2?y1; y:=y1; c:=1 
				[]c=1 & x>y -> x:=x-y 
				[]c=1 & y>x -> y:=y-x 
				[]c=1 & x=y -> r1!x; c:=0 
				]
			]
	}
}

defproc source_100 (chan!(int<8>) c)
{
	chp{
		*[c!100]
	}
}

defproc source_15 (chan!(int<8>) c)
{
	chp{
		*[c!15]
	}
}

defproc snk (chan?(int<8>) l)
{
	int<8> x;
	chp{
		*[l?x; log("%d", x)]
	}
}

defproc testproc (chan?(int<8>) X1, X2; chan!(int<8>) Y)
{
  gcd_decomp g(X1, X2, Y);

  source_100 ix1(X1);
  
  source_15 ix2(X2);

  snk o(Y);
}
